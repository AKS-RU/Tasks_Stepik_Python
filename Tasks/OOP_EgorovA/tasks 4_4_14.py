# Вспомним нашего приятеля из предыдущих уроков: класс Vector.
#
# Ваша задача создать класс Vector, который хранит в себе вектор целых чисел.  У класса Vector есть:
#
# конструктор __init__, принимающий произвольное количество аргументов. Среди всех переданных аргументов необходимо
# оставить только целые числа и сохранить их в атрибут values в виде списка. Причем значения должны храниться в порядке
# неубывания. В случае, если целых чисел не передано, нужно в атрибут values сохранять пустой список;
# переопределить метод __str__ так, чтобы экземпляр класса Vector выводился следующим образом:
# "Вектор(<value1>, <value2>, <value3>, ...)", если вектор не пустой. При этом значения должны быть упорядочены
# по возрастанию;
# "Пустой вектор", если наш вектор не хранит в себе значения
# переопределить метод __add__ так, чтобы экземпляр класса Vector мог складываться
# с целым числом, в результате должен получиться новый Vector, у которого каждый элемент атрибута values
# увеличен на число
# с другим вектором такой же длины. В результате должен получиться новый Vector, состоящий из суммы элементов,
# расположенных на одинаковых местах. Если длины векторов различаются, выведите сообщение
# "Сложение векторов разной длины недопустимо";
# В случае, если вектор складывается с другим типом(не числом и не вектором), нужно вывести сообщение
# "Вектор нельзя сложить с <значением>"
# переопределить метод __mul__ так, чтобы экземпляр класса Vector мог умножаться
# на целое число. В результате должен получиться новый Vector, у которого каждый элемент атрибута values
# умножен на переданное число;
# на другой вектор такой же длины. В результате должен получиться новый Vector, состоящий из произведения
# элементов, расположенных на одинаковых местах. Если длины векторов различаются, выведите сообщение
# "Умножение векторов разной длины недопустимо";
# В случае, если вектор умножается с другим типом(не числом и не вектором), нужно вывести сообщение
# "Вектор нельзя умножать с <значением>";


class Vector:

    def __init__(self, *args):
        self.values = []
        self.values = sorted(list(filter(lambda x: isinstance(x, int), args)))

    def __str__(self):
        if len(self.values):
            return f'Вектор({", ".join(list(map(str, self.values)))})'
        return f'Пустой вектор'

    def __add__(self, other):
        if isinstance(other, int):
            return Vector(*list(map(lambda x: x + other, self.values)))
        elif isinstance(other, Vector):
            if len(self.values) == len(other.values):
                return Vector(*list(map(lambda x, y: x + y, self.values, other.values)))
            else:
                return print(f'Сложение векторов разной длины недопустимо')
        else:
            return print(f'Вектор нельзя сложить с {other}')

    def __mul__(self, other):
        if isinstance(other, int):
            return Vector(*list(map(lambda x: x * other, self.values)))
        elif isinstance(other, Vector):
            if len(self.values) == len(other.values):
                return Vector(*list(map(lambda x, y: x * y, self.values, other.values)))
            else:
                return print(f'Умножение векторов разной длины недопустимо')
        else:
            return print(f'Вектор нельзя умножать с {other}')


v1 = Vector(1, 2, 3)
print(v1)  # печатает "Вектор(1, 2, 3)"

v2 = Vector(3, 4, 5)
print(v2)  # печатает "Вектор(3, 4, 5)"
v3 = v1 + v2
print(v3)  # печатает "Вектор(4, 6, 8)"
v4 = v3 + 5
print(v4)  # печатает "Вектор(9, 11, 13)"
v5 = v1 * 2
print(v5)  # печатает "Вектор(2, 4, 6)"
v5 + 'hi'  # печатает "Вектор нельзя сложить с hi"
