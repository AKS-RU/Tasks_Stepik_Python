# Отображение класса  Vector
# В некоторых языках программирования существует структура данных под названием вектор.
#
# Vector — это контейнер, который упорядочивает элементы данного типа в виде линейной последовательности.
# Он обеспечивает быстрый произвольный доступ к любому элементу и позволяет динамически добавлять элементы в
# последовательность и удалять их.
#
# Давайте создадим класс Vector, экземпляры которого будут представлять собой контейнеры для хранения только целых чисел.
#
# Ваша задача — создать класс Vector, который хранит в себе коллекцию целых чисел.
# У класса Vector должны быть реализованы:
#
# метод __init__, принимающий произвольное количество аргументов. Среди всех переданных аргументов необходимо
# оставить только целые числа и сохранить их в экземпляр в виде списка;
#
# переопределить метод __str__ так, чтобы экземпляр класса Vector отображался следующим образом:
# «Вектор(<value1>, <value2>, <value3>, ...)», если вектор не пустой. При этом значения должны быть упорядочены
# по возрастанию (будьте аккуратнее с пробелами, они стоят только после запятых, см. пример ниже);
#
# «Пустой вектор», если наш вектор не хранит в себе значения


class Vector:

    def __init__(self, *args):
        self.lst_vector = tuple(sorted([*filter(lambda x: type(x) == int, args)]))

    def __str__(self):
        if len(self.lst_vector):
            return f'Вектор{self.lst_vector}'
        return f'Пустой вектор'


v5 = Vector(1, True, False, 5, 2, True, 4)
print(str(v5))
