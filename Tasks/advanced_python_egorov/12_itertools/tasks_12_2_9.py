# Сайт знакомств
# Существует неофициальная формула, по которой можно ограничить потенциальных партнеров по возрасту

# Возраст женщины = возраст мужчины // 2 + 7
# Например, мужчине 40 лет делим на 2, получаем 20, прибавляем 7, получаем возраст идеальной
# жены 27 лет.

# Для нашей задачи давайте использовать формулу выше для нахождения нижней границей подходящего
# возраста женщины.

# Верхняя граница будет находиться по формуле:

# Возраст женщины = (возраст мужчины - 7) * 2
# Исходя из этих границ вам необходимо подобрать для каждого мужчины список подходящий по
# возрасту женщин

# Для этого в данной задаче будет два списка mans и women, состоящих из дата-классов Man и Woman

# Ваша задача написать функцию check_match, которая принимает список мужчин и список женщин,
# а затем проверяет для каждого мужчины какие женщины ему подходят по возрасту и в случае
# удачи выводит текст

# Пользователю {Имя_мужчины} подходит {Имя_женщины}
# Примечание 1: деление возраста необходимо выполнять целочисленно

# Примечание 2: необходимо в коде дописать только определение функции check_match

# Примечание 3: про импорты не забывайте

# Sample Input 1:

# mans = [Man(name='Федосий', age=40), Man(name='Фирс', age=69)]

# women = [Woman(name='Екатерина', age=46), Woman(name='Ангелина', age=48),
#          Woman(name='Акулина', age=33), Woman(name='Любовь', age=20),
#          Woman(name='Синклитикия', age=29)]

# check_match(mans, women)
# Sample Output 1:

# Пользователю Федосий подходит Екатерина
# Пользователю Федосий подходит Ангелина
# Пользователю Федосий подходит Акулина
# Пользователю Федосий подходит Синклитикия
# Пользователю Фирс подходит Екатерина
# Пользователю Фирс подходит Ангелина
# Sample Input 2:

# mans = [Man(name='Руслан', age=20), Man(name='Остап', age=58),
#         Man(name='Евстигней', age=18), Man(name='Феофан', age=52)]

# women = [Woman(name='Кира', age=19), Woman(name='Эмилия', age=60),
#          Woman(name='Евдокия', age=50), Woman(name='Татьяна', age=29),
#          Woman(name='Октябрина', age=54), Woman(name='Эмилия', age=20)]

# check_match(mans, women)
# Sample Output 2:

# Пользователю Руслан подходит Кира
# Пользователю Руслан подходит Эмилия
# Пользователю Остап подходит Эмилия
# Пользователю Остап подходит Евдокия
# Пользователю Остап подходит Октябрина
# Пользователю Евстигней подходит Кира
# Пользователю Евстигней подходит Эмилия
# Пользователю Феофан подходит Эмилия
# Пользователю Феофан подходит Евдокия
# Пользователю Феофан подходит Октябрина

from itertools import product
from dataclasses import dataclass


@dataclass
class Human:
    name: str
    age: int


@dataclass
class Man(Human):
    gender: str = 'M'


@dataclass
class Woman(Human):
    gender: str = 'W'


def check_match(lst_m: list, lst_f: list):
    for i in product(lst_m, lst_f):
        if (i[0].age // 2)+7 < i[1].age < (i[0].age-7)*2:
            print(f'Пользователю {i[0].name} подходит {i[1].name}')


mans = [Man(name='Руслан', age=20), Man(name='Остап', age=58),
        Man(name='Евстигней', age=18), Man(name='Феофан', age=52)]

women = [Woman(name='Кира', age=19), Woman(name='Эмилия', age=60),
         Woman(name='Евдокия', age=50), Woman(name='Татьяна', age=29),
         Woman(name='Октябрина', age=54), Woman(name='Эмилия', age=20)]

check_match(mans, women)
