# Кассовый чек
# Точное представление цен, скидок, налогов и других финансовых показателей имеют важное значение
# для биллинговых систем, платформ электронной коммерции и торговых предприятий.
# Модуль Decimal может помочь гарантировать, что ошибки округления не приведут к расхождениям
# в счетах-фактурах и финансовых отчетах.

# Представьте, вы программист компании, работающей в сфере торговли. У вас на носу неделя
# распродаж и вам нужно запрограммировать торговый аппарат, чтобы он правильно считал чек
# покупки при применении скидки.

# Причем ваша компания хочет, чтобы скидка применялась не к итоговой сумме покупки, а к цене
# каждого отдельного товара. После применения скидки, цена товара должна округлиться до двух
# знаков после запятой по правилам математического округления (режим ROUND_HALF_UP).
# И уже рассчитанная цена товара должна суммироваться в итоговом чеке.

# Входные данные
# На вход вашей программе сперва поступает количество товаров N, затем в следующих N строках
# поступает цена каждого из N товаров. В последней строке поступает значение скидки:
# число от 0 до 1.
# Здесь 0 обозначает 0% скидки, 1 - это 100% скидки, а число 0.25 обозначает дисконт в 25%

# Выходные данные
# Вывести итоговую сумму всех товаров после применения скидки.

# Пример
# Есть два товара стоимостью 5.75 и 2.25, скидка на них составляет 50%. Если сперва сложить
# стоимость всех товаров, то получим 8, тогда итоговая сумма с учетом скидки будет 4.

# Но по нашей тактике нужно сперва к каждому товару применить скидку, получим 2.875 и 1.125.
# Затем каждое из этих чисел математически округляем до 2 знаков после запятой,
# получаем 2.88 и 1.13. И только после этого суммируем и получаем ответ 4.01,
# что на одну копейку больше.


from decimal import Decimal, ROUND_HALF_UP


lst_prodict = []

for _ in range(int(input())):
    lst_prodict.append(Decimal(input()))

discount = Decimal(input())

print(sum([(i - i * discount).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
           for i in lst_prodict]))
