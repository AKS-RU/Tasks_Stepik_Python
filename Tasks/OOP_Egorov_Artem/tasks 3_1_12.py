# –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Constructor, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã:
#
# –ú–µ—Ç–æ–¥ add_atribute , –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –Ω–∞ –≤—Ö–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ. –ó–∞–¥–∞—á–∞ –º–µ—Ç–æ–¥–∞ add_atribute
# ‚Äî —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏ –∞—Ç—Ä–∏–±—É—Ç–∞;
#
# –ú–µ—Ç–æ–¥ display ,  –ø–µ—á–∞—Ç–∞—é—â–∏–π –Ω–∞ —ç–∫—Ä–∞–Ω —Å–ª–æ–≤–∞—Ä—å __dict__ —É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ Constructor
#
# üöÄ–ü–æ–¥—Å–∫–∞–∑–∫–∞üöÄ
# Sample Input 1:
#
# obj1 = Constructor()
# obj1.display()
# obj1.add_atribute('color', 'red')
# obj1.add_atribute('width', 20)
# obj1.display()
# Sample Output 1:
#
# {}
# {'color': 'red', 'width': 20}
# Sample Input 2:
#
# obj2 = Constructor()
# obj3 = Constructor()
#
# obj2.display()
# obj3.display()
#
# obj2.add_atribute('height', 100)
#
# obj3.add_atribute('a', 100)
# obj3.add_atribute('b', 300)
# obj3.add_atribute('c', 200)
# obj3.add_atribute('b', 1)
#
# obj2.display()
# obj3.display()
# Sample Output 2:
#
# {}
# {}
# {'height': 100}
# {'a': 100, 'b': 1, 'c': 200}

from typing import Any


class Constructor:

    def add_atribute(self, name_attr: str, value: Any):
        setattr(self, name_attr, value)

    def display(self):
        print(self.__dict__)
        return self.__dict__


if __name__ == '__main__':
    obj2 = Constructor()
    obj3 = Constructor()

    assert obj2.display() == {}
    assert obj3.display() == {}

    obj2.add_atribute('height', 100)

    obj3.add_atribute('a', 100)
    obj3.add_atribute('b', 300)
    obj3.add_atribute('c', 200)
    obj3.add_atribute('b', 1)

    assert obj2.display() == {'height': 100}
    assert obj3.display() == {'a': 100, 'b': 1, 'c': 200}
    print('–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!')
