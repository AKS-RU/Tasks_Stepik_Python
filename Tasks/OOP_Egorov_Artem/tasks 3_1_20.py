# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Point. –£ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
#
# –ú–µ—Ç–æ–¥ set_coordinates, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
# –≤ –∞—Ç—Ä–∏–±—É—Ç—ã x –∏ y
#
# –ú–µ—Ç–æ–¥ get_distance, –∫–æ—Ç–æ—Ä—ã–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Point –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è
# —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ç–µ–æ—Ä–µ–º–µ –ü–∏—Ñ–∞–≥–æ—Ä–∞. –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Point, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
# –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞".
#
#
# –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º Point
#
# p1 = Point()
# p2 = Point()
# p1.set_coordinates(1, 2)
# p2.set_coordinates(4, 6)
# d = p1.get_distance(p2) # –≤–µ—Ä–Ω—ë—Ç 5.0
# p1.get_distance(10) # –†–∞—Å–ø–µ—á–∞—Ç–∞–µ—Ç "–ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞"
# üöÄ–ü–æ–¥—Å–∫–∞–∑–∫–∞üöÄ
# Sample Input:
#
# Sample Output:
#
# –ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞
# –ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞


from math import sqrt


class Point:

    def set_coordinates(self, x: int | float, y: int | float):
        self.x = x
        self.y = y

    def get_distance(self, point: str):
        if isinstance(point, Point):
            return sqrt((((point.x - self.x) ** 2) + ((point.y - self.y) ** 2)))
        else:
            print('–ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞')


p1 = Point()
p2 = Point()
assert isinstance(p1, Point)
assert isinstance(p2, Point)

p1.set_coordinates(1, 2)
assert p1.x == 1
assert p1.y == 2
p2.set_coordinates(4, 6)
assert p2.x == 4
assert p2.y == 6
assert p1.get_distance(p2) == 5.0
p3 = Point()
p3.set_coordinates(10, 10)
p1.set_coordinates(4, 2)
assert p1.get_distance(p3) == 10.0
res = p1.get_distance(10)  # –†–∞—Å–ø–µ—á–∞—Ç–∞–µ—Ç "–ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞", –≤–µ—Ä–Ω–µ—Ç None
assert res is None, '–ú–µ—Ç–æ–¥ get_distance –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None, –µ—Å–ª–∏ –≤ –Ω–µ–≥–æ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞'
assert p2.get_distance([1, 2, 3]) is None  # –†–∞—Å–ø–µ—á–∞—Ç–∞–µ—Ç "–ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–µ —Ç–æ—á–∫–∞", –≤–µ—Ä–Ω–µ—Ç None

print('–í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!')
